(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
}

var speechRecognition = exports.speechRecognition = function speechRecognition() {
	_classCallCheck(this, speechRecognition);

	window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

	var recognition = new SpeechRecognition();
	recognition.interimResults = true;

	var p = document.createElement('p');
	var words = document.querySelector('.words');

	words.appendChild(p);

	recognition.addEventListener('result', function (e) {

		var transcript = Array.from(e.results).map(function (result) {
			return result[0];
		}).map(function (result) {
			return result.transcript;
		}).join('');

		var poopScript = transcript.replace(/poop|poo|shit|dump/gi, 'ðŸ’©');
		p.textContent = poopScript;

		if (e.results[0].isFinal) {
			p = document.createElement('p');
			words.appendChild(p);
		}
	});

	recognition.addEventListener('end', recognition.start);
	recognition.start();
};

var speechrecognition = exports.speechrecognition = new speechRecognition();

},{}],2:[function(require,module,exports){
"use strict";

var _speechRecognition = require("./modules/speech-recognition.js");

},{"./modules/speech-recognition.js":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvbW9kdWxlcy9zcGVlY2gtcmVjb2duaXRpb24uanMiLCJzcmMvanMvc2NyaXB0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztJLEFDQWEsNEIsQUFBQSxvQkFFWiw2QkFBYzt1QkFDYjs7UUFBQSxBQUFPLG9CQUFvQixPQUFBLEFBQU8scUJBQXFCLE9BQXZELEFBQThELEFBRTlEOztLQUFNLGNBQWMsSUFBcEIsQUFBb0IsQUFBSSxBQUN4QjthQUFBLEFBQVksaUJBQVosQUFBNkIsQUFFN0I7O0tBQUksSUFBSSxTQUFBLEFBQVMsY0FBakIsQUFBUSxBQUF1QixBQUMvQjtLQUFNLFFBQVEsU0FBQSxBQUFTLGNBQXZCLEFBQWMsQUFBdUIsQUFFckM7O09BQUEsQUFBTSxZQUFOLEFBQWtCLEFBRWxCOzthQUFBLEFBQVksaUJBQVosQUFBNkIsVUFBVSxhQUFLLEFBRTNDOztNQUFNLG1CQUFhLEFBQU0sS0FBSyxFQUFYLEFBQWEsU0FBYixBQUNqQixJQUFJLGtCQUFBO1VBQVUsT0FBVixBQUFVLEFBQU87QUFESixHQUFBLEVBQUEsQUFFakIsSUFBSSxrQkFBQTtVQUFVLE9BQVYsQUFBaUI7QUFGSixLQUFBLEFBR2pCLEtBSEYsQUFBbUIsQUFHWixBQUVQOztNQUFNLGFBQWEsV0FBQSxBQUFXLFFBQVgsQUFBbUIsd0JBQXRDLEFBQW1CLEFBQTJDLEFBQzlEO0lBQUEsQUFBRSxjQUFGLEFBQWdCLEFBRWhCOztNQUFJLEVBQUEsQUFBRSxRQUFGLEFBQVUsR0FBZCxBQUFpQixTQUFTLEFBQ3pCO09BQUksU0FBQSxBQUFTLGNBQWIsQUFBSSxBQUF1QixBQUMzQjtTQUFBLEFBQU0sWUFBTixBQUFrQixBQUNsQjtBQUVEO0FBZkQsQUFpQkE7O2FBQUEsQUFBWSxpQkFBWixBQUE2QixPQUFPLFlBQXBDLEFBQWdELEFBQ2hEO2FBQUEsQUFBWSxBQUNaO0E7O0FBS0ssSUFBSSxnREFBb0IsSUFBeEIsQUFBd0IsQUFBSTs7Ozs7QUN4Qm5DIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImV4cG9ydCBjbGFzcyBzcGVlY2hSZWNvZ25pdGlvbiB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0d2luZG93LlNwZWVjaFJlY29nbml0aW9uID0gd2luZG93LlNwZWVjaFJlY29nbml0aW9uIHx8IHdpbmRvdy53ZWJraXRTcGVlY2hSZWNvZ25pdGlvbjtcblxuXHRcdGNvbnN0IHJlY29nbml0aW9uID0gbmV3IFNwZWVjaFJlY29nbml0aW9uKCk7XG5cdFx0cmVjb2duaXRpb24uaW50ZXJpbVJlc3VsdHMgPSB0cnVlO1xuXG5cdFx0bGV0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cdFx0Y29uc3Qgd29yZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud29yZHMnKTtcblxuXHRcdHdvcmRzLmFwcGVuZENoaWxkKHApO1xuXG5cdFx0cmVjb2duaXRpb24uYWRkRXZlbnRMaXN0ZW5lcigncmVzdWx0JywgZSA9PiB7XG5cdFx0ICBcblx0XHRcdGNvbnN0IHRyYW5zY3JpcHQgPSBBcnJheS5mcm9tKGUucmVzdWx0cylcblx0XHRcdFx0Lm1hcChyZXN1bHQgPT4gcmVzdWx0WzBdKVxuXHRcdFx0XHQubWFwKHJlc3VsdCA9PiByZXN1bHQudHJhbnNjcmlwdClcblx0XHRcdFx0LmpvaW4oJycpO1xuXG5cdFx0XHRjb25zdCBwb29wU2NyaXB0ID0gdHJhbnNjcmlwdC5yZXBsYWNlKC9wb29wfHBvb3xzaGl0fGR1bXAvZ2ksICfwn5KpJyk7XG5cdFx0XHRwLnRleHRDb250ZW50ID0gcG9vcFNjcmlwdDtcblxuXHRcdFx0aWYgKGUucmVzdWx0c1swXS5pc0ZpbmFsKSB7XG5cdFx0XHRcdHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cdFx0XHRcdHdvcmRzLmFwcGVuZENoaWxkKHApO1xuXHRcdFx0fVxuXG5cdFx0fSk7XG5cblx0XHRyZWNvZ25pdGlvbi5hZGRFdmVudExpc3RlbmVyKCdlbmQnLCByZWNvZ25pdGlvbi5zdGFydCk7XG5cdFx0cmVjb2duaXRpb24uc3RhcnQoKTtcblx0fVxuXG5cbn1cblxuZXhwb3J0IGxldCBzcGVlY2hyZWNvZ25pdGlvbiA9IG5ldyBzcGVlY2hSZWNvZ25pdGlvbigpOyIsIi8vIG1haW4uanNcblxuXG4vL2ltcG9ydCB7IGRydW1raXQgfSBmcm9tIFwiLi9tb2R1bGVzL2RydW0ta2l0LmpzXCI7XG5cbi8vaW1wb3J0IHsgY3VzdG9tdmlkZW8gfSBmcm9tIFwiLi9tb2R1bGVzL2N1c3RvbS12aWRlby5qc1wiO1xuXG4vL2ltcG9ydCB7IHNsaWRlb25zY3JvbGwgfSBmcm9tIFwiLi9tb2R1bGVzL3NsaWRlLW9uLXNjcm9sbC5qc1wiO1xuXG4vL2ltcG9ydCB7IG1vdXNlc2hhZG93IH0gZnJvbSBcIi4vbW9kdWxlcy9tb3VzZS1zaGFkb3cuanNcIjtcblxuLy9pbXBvcnQgeyB3ZWJjYW0gfSBmcm9tIFwiLi9tb2R1bGVzL3dlYmNhbS5qc1wiO1xuXG5pbXBvcnQgeyBzcGVlY2hyZWNvZ25pdGlvbiB9IGZyb20gXCIuL21vZHVsZXMvc3BlZWNoLXJlY29nbml0aW9uLmpzXCI7XG5cblxuXG4iXX0=
